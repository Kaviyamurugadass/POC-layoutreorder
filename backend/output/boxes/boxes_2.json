[
  {
    "self_ref": "#/texts/78",
    "type": "text",
    "content": "With this data model, Docling enables representing document content in a unified manner, i.e., regardless of the source document format.",
    "page": 3,
    "bbox": {
      "left": 54.0,
      "top": 734.523,
      "right": 292.505,
      "bottom": 704.054
    }
  },
  {
    "self_ref": "#/texts/79",
    "type": "text",
    "content": "Besides specifying the data model, the DoclingDocument class defines APIs encompassing document construction, inspection, and export. Using the respective methods, users can incrementally build a DoclingDocument , traverse its contents in reading order, or export to commonly used formats. Docling supports lossless serialization to (and deserialization from) JSON, and lossy export formats such as Markdown and HTML, which, unlike JSON, cannot retain all available meta information.",
    "page": 3,
    "bbox": {
      "left": 54.0,
      "top": 700.669,
      "right": 292.505,
      "bottom": 593.487
    }
  },
  {
    "self_ref": "#/texts/80",
    "type": "text",
    "content": "A DoclingDocument can additionally be passed to a chunker class, an abstraction that returns a stream of chunks, each of which captures some part of the document as a string accompanied by respective metadata. To enable both flexibility for downstream applications and out-of-the-box utility, Docling defines a chunker class hierarchy, providing a base type as well as specific subclasses. By using the base chunker type, downstream applications can leverage popular frameworks like LangChain or LlamaIndex, which provide a high degree of flexibility in the chunking approach. Users can therefore plug in any built-in, self-defined, or third-party chunker implementation.",
    "page": 3,
    "bbox": {
      "left": 54.0,
      "top": 590.102,
      "right": 292.505,
      "bottom": 461.002
    }
  },
  {
    "self_ref": "#/texts/81",
    "type": "text",
    "content": "3.2 Parser Backends",
    "page": 3,
    "bbox": {
      "left": 54.0,
      "top": 446.496,
      "right": 156.807,
      "bottom": 436.689
    }
  },
  {
    "self_ref": "#/texts/82",
    "type": "text",
    "content": "Document formats can be broadly categorized into two types:",
    "page": 3,
    "bbox": {
      "left": 54.0,
      "top": 428.574,
      "right": 292.505,
      "bottom": 409.063
    }
  },
  {
    "self_ref": "#/texts/83",
    "type": "text",
    "content": "1. Low-level formats , like PDF files or scanned images. These formats primarily encode the visual representation of the document, containing instructions for rendering text cells and lines or defining image pixels. Most semantics of the represented content are typically lost and need to be recovered through specialized AI methods, such as OCR, layout analysis, or table structure recognition.",
    "page": 3,
    "bbox": {
      "left": 54.498,
      "top": 401.103,
      "right": 292.504,
      "bottom": 326.41
    }
  },
  {
    "self_ref": "#/texts/84",
    "type": "text",
    "content": "2. Markup-based formats , including MS Office, HTML, Markdown, and others. These formats preserve the semantics of the content (e.g., sections, lists, tables, and figures) and are comparatively inexpensive to parse.",
    "page": 3,
    "bbox": {
      "left": 54.498,
      "top": 319.945,
      "right": 292.504,
      "bottom": 278.12799999999993
    }
  },
  {
    "self_ref": "#/texts/85",
    "type": "text",
    "content": "Docling implements several parser backends to read and interpret different formats and it routes their output to a fitting processing pipeline. For PDFs Docling provides backends which: a) retrieve all text content and their geometric properties, b) render the visual representation of each page as it would appear in a PDF viewer. For markup-based formats, the respective backends carry the responsibility of creating a DoclingDocument representation directly. For some formats, such as PowerPoint slides, element locations and page provenance are available, whereas in other formats (for example, MS Word or HTML), this information is unknown unless rendered in a Word viewer or a browser. The DoclingDocument data model handles both cases.",
    "page": 3,
    "bbox": {
      "left": 54.0,
      "top": 269.78099999999995,
      "right": 292.505,
      "bottom": 129.72199999999998
    }
  },
  {
    "self_ref": "#/texts/86",
    "type": "text",
    "content": "PDF Backends While several open-source PDF parsing Python libraries are available, in practice we ran into various limitations, among which are restrictive licensing (e.g., pymupdf (pym 2024)), poor speed, or unrecoverable quality issues, such as merged text cells across far-apart text tokens or table columns (pypdfium, PyPDF) (PyPDFium Team 2024; pypdf Maintainers 2024).",
    "page": 3,
    "bbox": {
      "left": 54.0,
      "top": 118.79200000000003,
      "right": 292.505,
      "bottom": 87.93399999999997
    }
  },
  {
    "self_ref": "#/texts/86",
    "type": "text",
    "content": "PDF Backends While several open-source PDF parsing Python libraries are available, in practice we ran into various limitations, among which are restrictive licensing (e.g., pymupdf (pym 2024)), poor speed, or unrecoverable quality issues, such as merged text cells across far-apart text tokens or table columns (pypdfium, PyPDF) (PyPDFium Team 2024; pypdf Maintainers 2024).",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 734.523,
      "right": 558.005,
      "bottom": 693.095
    }
  },
  {
    "self_ref": "#/texts/87",
    "type": "text",
    "content": "We therefore developed a custom-built PDF parser, which is based on the low-level library qpdf (Berkenbilt 2024). Our PDF parser is made available in a separate package named docling-parse and acts as the default PDF backend in Docling. As an alternative, we provide a PDF backend relying on pypdfium (PyPDFium Team 2024).",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 690.615,
      "right": 558.005,
      "bottom": 627.268
    }
  },
  {
    "self_ref": "#/texts/88",
    "type": "text",
    "content": "Other Backends Markup-based formats like HTML, Markdown, or Microsoft Office (Word, PowerPoint, Excel) as well as plain formats like AsciiDoc can be transformed directly to a DoclingDocument representation with the help of several third-party format parsing libraries. For HTML documents we utilize BeautifulSoup (Richardson 2004-2024), for Markdown we use the Marko library (Ming 2019-2024), and for Office XML-based formats (Word, PowerPoint, Excel) we implement custom extensions on top of the python-docx (Canny and contributors 2013-2024a), python-pptx (Canny and contributors 20132024b), and openpyxl (Eric Gazoni 2010-2024) libraries, respectively. During parsing, we identify and extract common document elements (e.g., title, headings, paragraphs, tables, lists, figures, and code) and reflect the correct hierarchy level if possible.",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 619.053,
      "right": 558.005,
      "bottom": 445.729
    }
  },
  {
    "self_ref": "#/texts/89",
    "type": "text",
    "content": "3.3 Pipelines",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 434.163,
      "right": 385.871,
      "bottom": 424.356
    }
  },
  {
    "self_ref": "#/texts/90",
    "type": "text",
    "content": "Pipelines in Docling serve as an orchestration layer which iterates through documents, gathers the extracted data from a parser backend, and applies a chain of models to: a) build up the DoclingDocument representation and b) enrich this representation further (e.g., classify images).",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 418.955,
      "right": 558.005,
      "bottom": 366.568
    }
  },
  {
    "self_ref": "#/texts/91",
    "type": "text",
    "content": "Docling provides two standard pipelines. The StandardPdfPipeline leverages several state-of-the-art AI models to reconstruct a high-quality DoclingDocument representation from PDF or image input, as described in section 4. The SimplePipeline handles all markup-based formats (Office, HTML, AsciiDoc) and may apply further enrichment models as well.",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 364.257,
      "right": 558.005,
      "bottom": 289.782
    }
  },
  {
    "self_ref": "#/texts/92",
    "type": "text",
    "content": "Pipelines can be fully customized by sub-classing from an abstract base class or cloning the default model pipeline. This effectively allows to fully customize the chain of models, add or replace models, and introduce additional pipeline configuration parameters. To create and use a custom model pipeline, you can provide a custom pipeline class as an argument to the main document conversion API.",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 287.302,
      "right": 558.005,
      "bottom": 212.99700000000007
    }
  },
  {
    "self_ref": "#/texts/93",
    "type": "text",
    "content": "4 PDF Conversion Pipeline",
    "page": 3,
    "bbox": {
      "left": 365.657,
      "top": 200.15999999999997,
      "right": 511.845,
      "bottom": 189.41200000000003
    }
  },
  {
    "self_ref": "#/texts/94",
    "type": "text",
    "content": "The capability to recover detailed structure and content from PDF and image files is one of Docling's defining features. In this section, we outline the underlying methods and models that drive the system.",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 184.231,
      "right": 558.005,
      "bottom": 142.80200000000002
    }
  },
  {
    "self_ref": "#/texts/95",
    "type": "text",
    "content": "Each document is first parsed by a PDF backend, which retrieves the programmatic text tokens, consisting of string content and its coordinates on the page, and also renders a bitmap image of each page to support downstream operations. Any image format input is wrapped in a PDF container on the fly, and proceeds through the pipeline as a scanned PDF document. Then, the standard PDF pipeline applies a sequence of AI models independently on every page of the document to extract features and content, such as layout and table structures. Finally, the results from all pages are aggregated and passed through a post-processing stage, which eventually assembles the DoclingDocument representation.",
    "page": 3,
    "bbox": {
      "left": 319.5,
      "top": 140.322,
      "right": 558.005,
      "bottom": 87.93399999999997
    }
  }
]