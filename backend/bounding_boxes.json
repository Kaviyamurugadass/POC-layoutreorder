[
  {
    "self_ref": "#/texts/0",
    "text": "arXiv:2408.09869v5  [cs.CL]  9 Dec 2024",
    "page": 1,
    "bbox": {
      "left": 18.34,
      "top": 627.0,
      "right": 36.34,
      "bottom": 237.0
    }
  },
  {
    "self_ref": "#/texts/1",
    "text": "Docling Technical Report",
    "page": 1,
    "bbox": {
      "left": 212.59,
      "top": 566.64,
      "right": 399.412,
      "bottom": 551.163
    }
  },
  {
    "self_ref": "#/texts/2",
    "text": "Version 1.0",
    "page": 1,
    "bbox": {
      "left": 283.31,
      "top": 511.978,
      "right": 328.69,
      "bottom": 503.426
    }
  },
  {
    "self_ref": "#/texts/3",
    "text": "Christoph Auer Maksym Lysak Ahmed Nassar Michele Dolfi Nikolaos Livathinos Panos Vagenas Cesar Berrospi Ramis Matteo Omenetti Fabian Lindlbauer Kasper Dinkla Lokesh Mishra Yusik Kim Shubham Gupta Rafael Teixeira de Lima Valery Weber Lucas Morin Ingmar Meijer Viktor Kuropiatnyk Peter W. J. Staar",
    "page": 1,
    "bbox": {
      "left": 113.643,
      "top": 481.532,
      "right": 498.359,
      "bottom": 439.849
    }
  },
  {
    "self_ref": "#/texts/4",
    "text": "AI4K Group, IBM Research R\u00a8 uschlikon, Switzerland",
    "page": 1,
    "bbox": {
      "left": 249.283,
      "top": 427.545,
      "right": 362.717,
      "bottom": 408.084
    }
  },
  {
    "self_ref": "#/texts/5",
    "text": "Abstract",
    "page": 1,
    "bbox": {
      "left": 283.758,
      "top": 393.159,
      "right": 328.243,
      "bottom": 382.411
    }
  },
  {
    "self_ref": "#/texts/6",
    "text": "This technical report introduces Docling , an easy to use, self-contained, MITlicensed open-source package for PDF document conversion. It is powered by state-of-the-art specialized AI models for layout analysis (DocLayNet) and table structure recognition (TableFormer), and runs efficiently on commodity hardware in a small resource budget. The code interface allows for easy extensibility and addition of new features and models.",
    "page": 1,
    "bbox": {
      "left": 143.865,
      "top": 364.013,
      "right": 468.138,
      "bottom": 300.737
    }
  },
  {
    "self_ref": "#/texts/7",
    "text": "1 Introduction",
    "page": 1,
    "bbox": {
      "left": 108.0,
      "top": 267.802,
      "right": 190.814,
      "bottom": 257.054
    }
  },
  {
    "self_ref": "#/texts/8",
    "text": "Converting PDF documents back into a machine-processable format has been a major challenge for decades due to their huge variability in formats, weak standardization and printing-optimized characteristic, which discards most structural features and metadata. With the advent of LLMs and popular application patterns such as retrieval-augmented generation (RAG), leveraging the rich content embedded in PDFs has become ever more relevant. In the past decade, several powerful document understanding solutions have emerged on the market, most of which are commercial software, cloud offerings [3] and most recently, multi-modal vision-language models. As of today, only a handful of open-source tools cover PDF conversion, leaving a significant feature and quality gap to proprietary solutions.",
    "page": 1,
    "bbox": {
      "left": 108.0,
      "top": 239.37,
      "right": 504.003,
      "bottom": 143.54600000000005
    }
  },
  {
    "self_ref": "#/texts/9",
    "text": "With Docling , we open-source a very capable and efficient document conversion tool which builds on the powerful, specialized AI models and datasets for layout analysis and table structure recognition we developed and presented in the recent past [12, 13, 9]. Docling is designed as a simple, self-contained python library with permissive license, running entirely locally on commodity hardware. Its code architecture allows for easy extensibility and addition of new features and models.",
    "page": 1,
    "bbox": {
      "left": 108.0,
      "top": 135.88800000000003,
      "right": 504.003,
      "bottom": 83.52099999999996
    }
  },
  {
    "self_ref": "#/texts/10",
    "text": "Docling Technical Report",
    "page": 1,
    "bbox": {
      "left": 108.0,
      "top": 57.960000000000036,
      "right": 200.506,
      "bottom": 50.263000000000034
    }
  },
  {
    "self_ref": "#/texts/11",
    "text": "1",
    "page": 1,
    "bbox": {
      "left": 303.509,
      "top": 48.597999999999956,
      "right": 308.49,
      "bottom": 40.04600000000005
    }
  },
  {
    "self_ref": "#/texts/12",
    "text": "Here is what Docling delivers today:",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 716.523,
      "right": 253.972,
      "bottom": 707.971
    }
  },
  {
    "self_ref": "#/texts/13",
    "text": "\u00b7 Converts PDF documents to JSON or Markdown format, stable and lightning fast",
    "page": 2,
    "bbox": {
      "left": 135.397,
      "top": 695.23,
      "right": 468.397,
      "bottom": 686.678
    }
  },
  {
    "self_ref": "#/texts/14",
    "text": "\u00b7 Understands detailed page layout, reading order, locates figures and recovers table structures",
    "page": 2,
    "bbox": {
      "left": 135.397,
      "top": 680.366,
      "right": 504.003,
      "bottom": 660.905
    }
  },
  {
    "self_ref": "#/texts/15",
    "text": "\u00b7 Extracts metadata from the document, such as title, authors, references and language",
    "page": 2,
    "bbox": {
      "left": 135.397,
      "top": 654.593,
      "right": 480.85,
      "bottom": 646.041
    }
  },
  {
    "self_ref": "#/texts/16",
    "text": "\u00b7 Optionally applies OCR, e.g. for scanned PDFs",
    "page": 2,
    "bbox": {
      "left": 135.397,
      "top": 639.729,
      "right": 333.463,
      "bottom": 631.177
    }
  },
  {
    "self_ref": "#/texts/17",
    "text": "\u00b7 Can be configured to be optimal for batch-mode (i.e high throughput, low time-to-solution) or interactive mode (compromise on efficiency, low time-to-solution)",
    "page": 2,
    "bbox": {
      "left": 135.397,
      "top": 624.866,
      "right": 504.003,
      "bottom": 605.405
    }
  },
  {
    "self_ref": "#/texts/18",
    "text": "\u00b7 Can leverage different accelerators (GPU, MPS, etc).",
    "page": 2,
    "bbox": {
      "left": 135.397,
      "top": 599.093,
      "right": 355.411,
      "bottom": 590.541
    }
  },
  {
    "self_ref": "#/texts/19",
    "text": "2 Getting Started",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 572.49,
      "right": 205.291,
      "bottom": 561.742
    }
  },
  {
    "self_ref": "#/texts/20",
    "text": "To use Docling, you can simply install the docling package from PyPI. Documentation and examples are available in our GitHub repository at github.com/DS4SD/docling. All required model assets 1 are downloaded to a local huggingface datasets cache on first use, unless you choose to pre-install the model assets in advance.",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 547.82,
      "right": 504.003,
      "bottom": 506.362
    }
  },
  {
    "self_ref": "#/texts/21",
    "text": "Docling provides an easy code interface to convert PDF documents from file system, URLs or binary streams, and retrieve the output in either JSON or Markdown format. For convenience, separate methods are offered to convert single documents or batches of documents. A basic usage example is illustrated below. Further examples are available in the Doclign code repository.",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 498.525,
      "right": 504.003,
      "bottom": 457.246
    }
  },
  {
    "self_ref": "#/texts/22",
    "text": "from docling.document_converter import DocumentConverter Large",
    "page": 2,
    "bbox": {
      "left": 108.753,
      "top": 448.911,
      "right": 491.336,
      "bottom": 391.628
    }
  },
  {
    "self_ref": "#/texts/23",
    "text": "source = \"https://arxiv.org/pdf/2206.01062\" # PDF path or URL converter = DocumentConverter() result = converter.convert_single(source) print(result.render_as_markdown()) # output: \"## DocLayNet: A Human -Annotated Dataset for Document -Layout Analysis [...]\"",
    "page": 2,
    "bbox": {
      "left": 108.785,
      "top": 428.985,
      "right": 460.4,
      "bottom": 381.666
    }
  },
  {
    "self_ref": "#/texts/24",
    "text": "Optionally, you can configure custom pipeline features and runtime options, such as turning on or off features (e.g. OCR, table structure recognition), enforcing limits on the input document size, and defining the budget of CPU threads. Advanced usage examples and options are documented in the README file. Docling also provides a Dockerfile to demonstrate how to install and run it inside a container.",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 367.837,
      "right": 504.003,
      "bottom": 315.649
    }
  },
  {
    "self_ref": "#/texts/25",
    "text": "3 Processing pipeline",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 297.598,
      "right": 223.69,
      "bottom": 286.85
    }
  },
  {
    "self_ref": "#/texts/26",
    "text": "Docling implements a linear pipeline of operations, which execute sequentially on each given document (see Fig. 1). Each document is first parsed by a PDF backend, which retrieves the programmatic text tokens, consisting of string content and its coordinates on the page, and also renders a bitmap image of each page to support downstream operations. Then, the standard model pipeline applies a sequence of AI models independently on every page in the document to extract features and content, such as layout and table structures. Finally, the results from all pages are aggregated and passed through a post-processing stage, which augments metadata, detects the document language, infers reading-order and eventually assembles a typed document object which can be serialized to JSON or Markdown.",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 272.749,
      "right": 504.003,
      "bottom": 176.92399999999998
    }
  },
  {
    "self_ref": "#/texts/27",
    "text": "3.1 PDF backends",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 161.43399999999997,
      "right": 192.035,
      "bottom": 152.47800000000007
    }
  },
  {
    "self_ref": "#/texts/28",
    "text": "Two basic requirements to process PDF documents in our pipeline are a) to retrieve all text content and their geometric coordinates on each page and b) to render the visual representation of each page as it would appear in a PDF viewer. Both these requirements are encapsulated in Docling's PDF backend interface. While there are several open-source PDF parsing libraries available for python, we faced major obstacles with all of them for different reasons, among which were restrictive",
    "page": 2,
    "bbox": {
      "left": 108.0,
      "top": 141.07100000000003,
      "right": 504.003,
      "bottom": 88.88200000000006
    }
  },
  {
    "self_ref": "#/texts/29",
    "text": "1 see huggingface.co/ds4sd/docling-models/",
    "page": 2,
    "bbox": {
      "left": 120.653,
      "top": 79.70000000000005,
      "right": 276.461,
      "bottom": 70.13999999999999
    }
  },
  {
    "self_ref": "#/texts/30",
    "text": "2",
    "page": 2,
    "bbox": {
      "left": 303.509,
      "top": 48.597999999999956,
      "right": 308.49,
      "bottom": 40.04600000000005
    }
  }
]